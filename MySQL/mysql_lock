#######################################行锁与表锁################################################
"""
简述：

    行锁，锁的是表中对应的行，只限制当前行的读写。
    表锁，锁的是整张表，限制的是整张表的数据读写。

比较：

    行锁，计算机资源开销大，加锁慢；会出现死锁；锁定粒度最小，锁冲突的概率最低，并发度最高，性能高。
    表锁，计算机资源开销小，加锁快；不会出现死锁；锁定粒度大，锁冲突的概率最高，并发度最低，性能低。

两种行锁的特点:

    共享锁:
    
        A 对数据 B 加了 共享锁，A能读取和修改数据B，C 等其它只能读取数据B，但是不能修改。直至A释放了B的锁。
    
    排他锁:
    
        A  对数据 B 加了 排他锁，A能读取和修改数据B，C 等其它不能再对数据B加其它的锁。直观体验是不能修改，不能使用含有加锁动作的select读取。

两种行锁的加锁方式:

    要注意的是：
    
        行锁的实现SQL语句中必须要有索引的限制条件，例如含有 where id=xxx 这类语句。
        行锁的实现SQL语句没有索引限制条件会变成表锁
        InnoDB引擎 默认的修改数据类SQL语句，update,delete,insert等，都会自动给涉及到的数据加上排他锁。
    
    共享锁:
        select 的添加可以使用满足格式：select ... where 索引限制 lock in share mode 的语句。例如“select name from lgh_user where id = 1 lock in share model” 此时 id 是索引。
    排他锁:
        满足格式：select ... where 索引限制 for update 的语句
    锁的释放:
        非事务(Transaction) 中，语句执行完毕，便释放锁。
        行锁在事务 (Transaction) 中，只有等到当前的事务Transaction 进行了 commit 或 roll back，锁才能释放。

"""

###################数据库与缓存数据一致性解决方案################
"""
一般的策略是当更新数据时，先删除缓存数据，然后更新数据库，等要查询的时候才把最新的数据更新到缓存

场景一

    当更新数据时，如更新某商品的库存，当前商品的库存是100，现在要更新为99，先更新数据库更改成99，然后删除缓存，发现删除缓存失败了，
    这意味着数据库存的是99，而缓存是100，这导致数据库和缓存不一致。

场景一解决方案

    这种情况应该是先删除缓存，然后在更新数据库，如果删除缓存失败，那就不要更新数据库，如果说删除缓存成功，而更新数据库失败，
    那查询的时候只是从数据库里查了旧的数据而已，这样就能保持数据库与缓存的一致性。

场景二

    在高并发的情况下，如果当删除完缓存的时候，这时去更新数据库，但还没有更新完，另外一个请求来查询数据，发现缓存里没有，
    就去数据库里查，还是以上面商品库存为例，如果数据库中产品的库存是100，那么查询到的库存是100，然后插入缓存，插入完缓存后，
    原来那个更新数据库的线程把数据库更新为了99，导致数据库与缓存不一致的情况

场景二解决方案

    遇到这种情况，可以用队列的去解决，创建几个队列，如20个，根据商品的ID去做hash值，然后对队列个数取摸，
    当有数据更新请求时，先把它丢到队列里去，当更新完后在从队列里去除，如果在更新的过程中，遇到以上场景，先去缓存里看下有没有数据，
    如果没有，可以先去队列里看是否有相同商品ID在做更新，如果有也把查询的请求发送到队列里去，然后同步等待缓存更新完成。

"""
#######################加入购物车里面的商品被商家调整价格以后如何处理金额问题################
"""
当一个商品加入购物车以后，商品价格是100元，用户放进购买车进行支付（商家刚好这时在erp系统、商城管理系统上进行调整价格为120元）。这种情况如何处理？


类似淘宝的那种形式，加入购物车是100，然后选择购物车商品跳转到订单页面（订单确认键）时候，根据商品id查询此时的商品价格，
然后计算出总价生成订单id，如果这个过程中商家修改了价格，价格就会变化成修改后的价格，生成订单以后商家再修改价格就不变了，
就像淘宝做活动的那类“加入购物车xxx小时以后降价”只要生成订单，价格就不会变了。 

"""
